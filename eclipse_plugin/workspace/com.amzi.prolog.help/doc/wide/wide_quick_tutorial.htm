<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>Quick Tutorial</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0Gold (Win95; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">
<h1><A NAME="AQuickTutorial"></A><FONT COLOR="#D2AA00">Quick Tutorial</FONT> </h1>
<P>This section is a tutorial introduction to the Amzi! Prolog development
tools. It is not intended to be an introduction to Prolog. If you need
an introduction to the Prolog language we recommend <I>Adventure in Prolog</I>.
</P>

<P>The tutorial makes use of a simple adventure game, Duck World, to illustrate
how to use the Amzi! tools to build complex applications. Accordingly,
it is composed of a number of files. </P>

<P><IMG SRC="pro/arrowrt.gif" HEIGHT=18 WIDTH=18 ALIGN=BOTTOM> <I>(Why Duck
World? Because Amzi! inc. is located in an old farm house backed up on
conservation land. We bought ducks out of whimsy one day, which were later
discovered by the fox in the woods. The ducks have proved to be an adventure.)</I>
</P>

<P>The tutorial demonstrates both the command-line (alis) and Windows-IDE
interfaces to Amzi! Prolog. </P>

<P>This tutorial starts by testing some of the basic predicates of Duck
World in the listener. It then goes through the full example, showing how
the program is modularized, how it is compiled and run using the listener,
and how it is linked into a distributable application. </P>

<P>The source code for Duck World can be found in the samples/prolog/ducks sub-directory. 
</P>

<H2><A NAME="DuckWorld"></A><FONT COLOR="#0000FF">Duck World</FONT></H2>

<P><!AMZI_INDEX = Tutorial; Duck World>An adventure game is a simulation
of an environment, real or imagined, that the user explores, usually with
some goal in mind. Duck World is a simple adventure game, where the objective
is to go from the house, through the yard, to the duck pen to get an egg,
and back to the house again, without losing any ducks to the fox. </P>

<P>The commands for manipulating the environment are all entered as legal
Prolog goals (ending in periods). </P>

<P>They are: </P>

<MENU>
<LI>goto(X) - moves you to place X, where X can be either house, yard or
pen. </LI>

<LI>take(X) - takes something if it's where you are; the egg is the only
thing you're supposed to take. </LI>

<LI>chase(ducks) - how to get the ducks back in their pen. </LI>

<LI>quit - this, or any illegal command, will quit the game for you. </LI>
</MENU>

<P>When you have brought the egg into the house the game ends. </P>

<H2><A NAME="StartingtheListener"></A><FONT COLOR="#0000FF">Starting the
Listener</FONT></H2>

<P><!AMZI_INDEX = alis; Listener; IDE>Amzi! Prolog can be run using one
of two different methods: </P>

<UL>
<LI>By running the listener, alis. </LI>

<LI>By running the Windows Interactive Development Environment (IDE). </LI>
</UL>

<P>To start the listener from the operating system command-line, type the
input shown in the left box. To do this within the IDE, select the menu
items shown in the right box. General instructions are given in <I>italics</I>.
</P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
<PRE><FONT COLOR="#000080">c&gt;  alis</FONT></PRE>
</TD>

<TD>
<PRE><I><FONT COLOR="#000080">Double-Click on Icon for the
Amzi! Prolog IDE
</FONT></I><FONT COLOR="#000080">Listener / Start</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>The copyright message will be displayed followed by the prompt, <B>?-</B>
</P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">Amzi! Prolog &lt;version information&gt;
Amzi! Prolog Listener
Copyright (c)1987-97 Amzi! inc. All Rights Reserved.
Type  'quit.'  to exit
?-</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>You are now in a Prolog listener, which is awaiting your command. Try
out this classic, being careful to remember the single quotes and the ending
period. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- write('Hello World').
Hello World</FONT></PRE>
</TD>
</TR>
</TABLE>

<P><IMG SRC="pro/arrowrt.gif" HEIGHT=18 WIDTH=18 ALIGN=BOTTOM>
<I>Note: The listener does NOT have a full line editor at the ?- prompt,
although it appears to behave that way in the IDE. You can type in characters
and backspace to fix mistakes. You cannot use the mouse or cursor keys
to edit a query. You can cut and paste from one line to the prompt, but
you can only edit that line using the backspace key. </I></P>

<P>(To exit, you would type &quot;quit.&quot; or select Listener / End
from the IDE menu.) </P>

<H2><A NAME="CreatingaSourceFile"></A><FONT COLOR="#0000FF">Creating a
Source File</FONT></H2>

<P><!AMZI_INDEX =  Duck World; Tutorial; Source Files; pro Files>Before
looking at the Duck World source code, create a small experimental file
called DW.PRO. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
      <PRE><I><FONT COLOR="#000080">Use an editor to type in your code
Save your file as dw.pro </FONT></I></PRE>
</TD>

<TD>
      <PRE><FONT COLOR="#000080">File / New
<I>Type your code into the window
</I>File / Save As dw.pro </FONT></PRE>
</TD>
</TR>
</TABLE>

<P>Type the following lines of Prolog code into DW.PRO: </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">% Experiments
nextto(house, yard).
nextto(yard, pen).

loc(you, house).

move(Place) :-
  retract( loc(you, _) ),
  assert( loc(you, Place) ).</FONT></PRE>
</TD>
</TR>
</TABLE>

<P><IMG SRC="pro/arrowrt.gif" HEIGHT=18 WIDTH=18 ALIGN=BOTTOM> <I>Note, it
is important to keep the clauses defining a predicate together, as the
clauses of the predicate nextto/2 are. If the definitions are scattered,
the program will seem to work properly when interpreted, but behave in
an unexpected manner when compiled.</I> </P>

<H2><A NAME="ConsultingaSourceFile"></A><FONT COLOR="#0000FF">Consulting
a Source File</FONT></H2>

<P><!AMZI_INDEX = Source Files; pro Files; Duck World; alis; IDE>To play
with DW.PRO, consult it into the listener as shown: </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
<PRE><FONT COLOR="#000080">?- consult(dw).
yes</FONT></PRE>
</TD>

<TD>
      <PRE><FONT COLOR="#000080">Listener / Consult
dw.pro</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>You are now in the listener with DW.PRO consulted. </P>

<H2><A NAME="UsingtheListener"></A><FONT COLOR="#0000FF">Using the Listener</FONT></H2>

<P><!AMZI_INDEX = alis; Tutorial; Duck World; listing; add; move; goto>Now
that you've reached the listener, make sure your file was consulted by
using <B>listing</B>. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- listing.</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>This will show you the predicates of dw.pro, although they will look a little 
  different because the variables are renamed with an _ and a number, e.g. _0. 
</P>

<P>You can try various queries from the listener. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- loc(you, X).
X = house</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>You can test move. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- move(yard), loc(you, X).
X = yard
?- move(foobar), loc(you, X).
X = foobar</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>Because <B>move</B> doesn't check to see if the move makes sense, you
might decide to add a <B>goto</B> predicate with more intelligence. You
can enter it directly in the listener using <B>add</B>. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- add.
|  goto(P) :-
loc(you, X),
nextto(X, P),
move(P).
|  quit.
?-</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>This is a useful technique for quick experiments, but the code typed
in the listener is not entered into your source file. Because we want <B>goto</B>
to be part of the game it is best to type it directly into the source file
and then reconsult it. </P>

<P>This can be done by moving from the listener to the editor. You can
use the built-in IDE editor, or, under DOS, invoke the editor of your choice.
In the IDE, simply selecting Listener/Reconsult will reconsult the last
file (or project) consulted. The last file consulted is also remembered
between sessions, so you begin a new IDE session by simply selecting Reconsult.
</P>

<P>(You need to reconsult, rather than consult, because consulting would
will simply add a second copy of your program to the Prolog workspace.
Listing would show two of every predicate.) </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
      <PRE><I><FONT COLOR="#000080">Edit dw.pro in an editor
then in the listener:
</FONT></I><FONT COLOR="#000080">?- reconsult(dw).
yes</FONT></PRE>
</TD>

<TD>
      <PRE><FONT COLOR="#000080"><I>Edit dw.pro in its window
</I>File / Save
Listener / Reconsult</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>You can then test it. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- goto(yard).
yes
?- goto(pen).
yes
?- goto(yard).
no</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>It didn't work right, which leads to the next section. </P>

<H2><A NAME="Debugging"></A><FONT COLOR="#0000FF">Debugging</FONT></H2>

<P><!AMZI_INDEX = Tutorial; Duck World; Debugging><B>goto</B> lets you
get into the pen, but doesn't let you get back out. First, you can use
the listener to make sure the game is in the state required for testing.
To do this enter the goals to place you in the pen. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- retract(loc(you, _)), assert(loc(you, pen)).
yes</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>The listener gives you the ability to dynamically adjust the state of
your application, effectively putting you in the middle of it. This, by
itself, is a powerful tool for debugging. </P>

<P>You can now trace the execution of goto(yard) to see why it is failing.
To do this you need to start the debugger. Type: </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
<PRE><FONT COLOR="#000080">?- debug.</FONT></PRE>
</TD>

<TD>
<PRE><FONT COLOR="#000080">Listener / Debug On</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>The debugger in alis is line-oriented, and is controlled from the keyboard.
In the IDE, a separate debugger window is opened, which is controlled with
the mouse. You enter your normal interaction with the program in the listener
window. </P>

<P>Next, type in the goal to be traced at the listener prompt, which is
??- for alis and ?- for the IDE: </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- goto(yard).</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>To step through the Prolog code type: </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
<PRE><FONT COLOR="#000080">? c
<I>Alternatively
</I>? [Enter]</FONT></PRE>
</TD>

<TD>
<PRE><I><FONT COLOR="#000080">Click on the &quot;Creep&quot; button</FONT></I></PRE>
</TD>
</TR>
</TABLE>

<P>Note the IDE does not display the ? prompt. (See the Debugger section
for other options.) </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">Calling: goto(yard)
CALL:(1) goto(yard)    ? c
   Calling: loc(you,H64)
   CALL: loc(you,pen)    ? c
   EXIT: loc(you,pen)    ? c
   Calling: nextto(pen,yard)
   FAIL: nextto(pen,yard)    ? c
   FAIL: loc(you,pen)    ? c
   FAIL: loc(you,H64)    ? c
FAIL: goto(yard)    ? c
FAIL: goto(yard)    ? c
no</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>To leave the debugger </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
<PRE><FONT COLOR="#000080">??- quit.</FONT></PRE>
</TD>

<TD>
<PRE><FONT COLOR="#000080">Listener / Debug Off
<I>Or, Click on the &quot;Stop&quot;
button</I></FONT></PRE>
</TD>
</TR>
</TABLE>

<P>The trace reveals that nextto(pen, yard) is different from nextto(yard,
pen), so, to get <B>goto/1</B> to work, a predicate that equates the two
is needed. The solution chosen for Duck World is the predicate <B>connect/2</B>,
which is used instead of <B>nextto/2</B> in the <B>goto/1</B> definition.
</P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">connect(X, Y) :- nextto(X, Y).
connect(X, Y) :- nextto(Y, X).</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>This code can be added to the source file and the development process
continues. This is the normal way to develop a Prolog application. Predicates
are gradually added to the source file as the application grows. The application
can be tested at any point during the development process and individual
predicates can be tested and their execution traced to understand why the
application is working the way it does. </P>

<H2><A NAME="Modules"></A><FONT COLOR="#0000FF">Modules</FONT></H2>

<P><!AMZI_INDEX = Tutorial; Modules; Duck World; consult; loc; main; dynamic; goto>As
an application grows, it is natural to want to break it up into modules.
At the simplest this means splitting the predicate definitions among various
source files. These files can be <B>consult</B>ed together and the application
run from the listener. </P>

<P>However, it is often preferred to keep some of the predicates hidden
within a file and to allow only certain predicates to be called from other
source files. This is done through two compiler directives (specified by
:- in the source code), import and export. These directives specify which
predicates will be visible outside of the source file (export), and which
predicates the file is calling that it expects to find elsewhere (import).
</P>

<P>Included in the samples are two source files that illustrate this idea.
They are: </P>

<ul>
  <li>duck1.pro - the source code implementing the commands. </li>
  <li>duck2.pro - the source code for the main control loop. </li>
</ul>
<P>Even for compiled applications, there are usually at least a few predicates
which remain in the dynamic database. It is often convenient to separate
their definition to a separate file that also initializes them by <B>assert</B>ing
them into the dynamic database when the program starts up. </P>

<P>In the case of Duck World, the <B>loc/2</B> predicate is constantly
being changed by the application and therefore is kept in the dynamic database.
The file DUCKENV.PRO contains the code to initialize the database. Notice
that it is <B>consult</B>ed when <B>main/0</B> is called. </P>

<P>If you want to keep a dynamic predicate's definition in with compiled
code, you can use the <B>dynamic</B> directive. It tells the compiler to
keep the specified predicate in the dynamic database, rather than comiling
it. </P>

<P>For example, in this code <B>loc/2</B> will be in the dynamic database
while <B>main</B> and <B>goto</B> are compiled. dynamic is ignored for
interpreted code. </P>

<UL>
<PRE><FONT COLOR="#000080">:- dynamic loc/2.

main :- ...

loc(you, house).
loc(egg, pen)...

goto(...</FONT></PRE>
</UL>

<H2><A NAME="RunningaModularApplication"></A><FONT COLOR="#0000FF">Running
a Modular Application</FONT></H2>

<P><!AMZI_INDEX = Tutorial; Duck World; Modules; consult; main>You can
run the modularized Duck World from a listener by <B>consult</B>ing it
and calling <B>main/0</B>, the predicate that starts it running. (You can
also call any of the other predicates of Duck World to see if they're working
and trace them if they're not.) </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">?- consult([duck1, duck2]).                               
?- main.
Welcome to Duck World
Go get an egg
&gt;&gt; goto(yard).
You are in the yard
&gt;&gt; .....</FONT></PRE>
</TD>
</TR>
</TABLE>

<H3><A NAME="UsingalisandBATFiles"></A><FONT COLOR="#000080">Using alis
and BAT Files</FONT></H3>

<P><!AMZI_INDEX = alis; BAT; Tutorial; Duck World; main><B>main/0</B>
is a special predicate for Amzi! Prolog because it is the main entry point
into your program. When you include files to be consulted on the alis
command line, alis first tries to call <B>main/0</B> before establishing
the listener environment. This means that alis can be used to launch your
application without the need for compiled or linked code. Further, when
alis finds a <B>main/0</B> to call, it exits back to the operating system
when it's finished, rather than staying in the listener. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>
<PRE><FONT COLOR="#000080">c&gt;  alis duck1 duck2
Welcome to Duck World
Go get an egg
&gt;&gt; quit.
Quitter
c&gt;</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>By creating a batch file, ducks.bat with the line &quot;alis duck1 duck2&quot;, 
  you can run Duck World by simply typing &quot;ducks&quot; at the operating system 
  prompt. </P>

<P>If you have a large number of files in your application, you can create
a file like DUCKS.PRO that consults each of the files. Then only this one
file need be specified on the alis command line. </P>

<H3><A NAME="UsingProjectsintheIDE"></A><FONT COLOR="#000080">Using Projects</FONT></H3>

<P><!AMZI_INDEX = Tutorial; Duck World; IDE>You can create a project file (.ppj) 
  by selecting Build / Project New from the IDE menu. Enter the name of your project, 
  e.g. ducks.ppj. Next you will be presented with a dialog box which you can use 
  to add files to your project. Double-click on duck1.pro and duck2.pro. Their 
  names will appear in the window on the bottom. Click on &quot;OK.&quot; </P>

<P>Now instead of using Listener / Consult to individually consult each
file, you can simply consult the project, which, in turn, consults each
file in the project. </P>

<H2><A NAME="Compiling"></A><FONT COLOR="#0000FF">Compiling</FONT></H2>

<P><!AMZI_INDEX = Compiling; Duck World; Tutorial>Compiling Duck World
is easily done: </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
<PRE><FONT COLOR="#000080">c&gt;  acmp duck1
c&gt;  acmp duck2</FONT></PRE>
</TD>

<TD>
<PRE><FONT COLOR="#000080">Build / Compile
ducks.ppj</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>Note, under the IDE we simply compile the project. This causes all the
modified source files in the project to be recompiled. </P>

<P>acmp can also be invoked with no arguments, in which case it will prompt
you for the names of the files. See the Compiler section for more details.
</P>

<P>The result of compiling is a Prolog object file, in this case, duck1.plm and 
  duck2.plm. </P>

<H2><A NAME="Running"></A><FONT COLOR="#0000FF">Running</FONT></H2>

<P><!AMZI_INDEX  Tutorial; Duck World>The .plm files can be run from either alis 
  or the IDE just as the .pro Files were. The only difference is they go faster 
  and the debugger cannot trace them. If you wanted, you could run Duck World 
  consulting the .pro file for one and loading the .plm file for the other. This 
  way you could use trace on the predicates in the .pro file (duck2 in this example). 
</P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="50%" >
<TR>
<TD>?- load(duck1), consult(duck2), main.</TD>
</TR>
</TABLE>

<P>This can also be accomplished in the IDE by setting up your project to include 
  duck1.plm and DUCK2.PRO. When consulting projects (using Listener / Consult), 
  .plm files are loaded and .pro files are consulted. </P>

<P>With alis, the .plm files can be loaded from the command line, just as the 
  .pro files were. This can be either directly </P>

<blockquote>
  <PRE><FONT COLOR="#000080">c&gt;  alis duck1.plm duck2.plm</FONT></PRE>
</blockquote>
<P>or by using an intermediate file to load the component files. </P>

<blockquote>
  <PRE><FONT COLOR="#000080">c&gt;  alis ducks</FONT></PRE>
</blockquote>
<H2><A NAME="LinkingandEXEGeneration"></A><FONT COLOR="#0000FF">Linking
and Running</FONT></H2>

<P><!AMZI_INDEX = Linking; Packaging; EXE Files; Tutorial; Duck World>To
build a stand-alone application first create a Prolog load module (.xpl
file) with the Amzi! Prolog linker, alnk. </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
<PRE><FONT COLOR="#000080">c&gt;  alnk ducks duck1 duck2</FONT></PRE>
</TD>

<TD>
<PRE><FONT COLOR="#000080">Build / Link
ducks.ppj</FONT></PRE>
</TD>
</TR>
</TABLE>

<P>Note, under the IDE we just link the project to create an .xpl file with
the same name as the project. </P>

<P>Using alnk, the first argument is the name of the .xpl file. The next
two files are the .plm files that are linked together. </P>

<P>The .plm files (in this case duck1.plm and duck2.plm) are linked with alib.plm, 
  the Prolog portion of the Amzi! engine, to form an application. (Hence, alib.plm 
  must be somewhere in the PATH or AMZI_DIR.) </P>

<P>Alnk can also be invoked with no arguments, in which case it will prompt you 
  for inputs. See the <a href="pro/prlinker.htm">Linker section</a> for more details. 
</P>

<P>To run Duck World, just type: </P>

<TABLE BORDER=1 CELLPADDING=3 WIDTH="100%" >
<TR>
<TD>Command-Line alis</TD>

<TD>Windows-IDE</TD>
</TR>

<TR>
<TD>
<PRE><FONT COLOR="#000080">c&gt; arun ducks</FONT></PRE>
</TD>

<TD>
<PRE><FONT COLOR="#000080">Build / Run
ducks.xpl                    </FONT></PRE>
</TD>
</TR>
</TABLE>

<H2><A NAME="DistributinganApplication"></A><FONT COLOR="#0000FF">Distributing
an Application</FONT></H2>

<P><!AMZI_INDEX = Duck World; tutorial; Distributing>If you decided to
distribute Duck World, then to do so, you need these files for command-line
environments: </P>

<ul>
  <li>ducks.exe - The start up executable </li>
  <li>ducks.xpl - The Prolog load module </li>
  <li>ducks.cfg - The initialization file (optional) </li>
  <li>duckenv.pro - The user modifiable source code (optional) </li>
</ul>
<P>For Windowing environments, arun.exe would be replaced by your own
C/C++, Visual Basic or other language program. </P>

<H2><A NAME="InterfacingwithOtherTools"></A><FONT COLOR="#0000FF">Interfacing
with Other Tools</FONT></H2>

<P><!AMZI_INDEX =  C++; Delphi>You can enhance the Prolog engine with your
own built-in predicates written in C/C++, Delphi or Java. </P>

<P>For example, you might want to use a graphical interface for Duck World
with quacking ducks and the like. In this case the Logic Server API allows
you to either extend the Prolog language with graphics predicates written
in C/C++ that are called directly by the Prolog code, or to write the user
interface to the code in C/C++ (or Visual Basic under Windows) and call
embedded Prolog for the logic. You can combine the techniques, both extending
and embedding Prolog in the same application. </P>

<P>The <a href="ls/lsfrtop.htm">section on the Logic Server API</a> tells how 
  integrate Prolog with other languages. </P>

<!-- #BeginLibraryItem "/Library/Copyright.lbi" -->
<p><i><font size=-1>Copyright &copy;1987-2011 Amzi! inc. All Rights Reserved. 
  Amzi! is a registered trademark and Logic Server is a trademark 
  of Amzi! inc.</font></i></p>

<!-- #EndLibraryItem --><P>&nbsp;</P>

</BODY>
</HTML>
