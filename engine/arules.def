; Amzi! Logic Server DLL for Console Apps
;
; The use of a .DEF file is necessary to create a DLL that
; can be accessed using __stdcall from non-C/C++ tools that
; do not undecorate __stdcall names, such as VB.

; NOTE!!! Add all entry points (unless IFDEF'd) to
; amzi.def, arules.def and arulesrt.def

LIBRARY ARULES

EXPORTS

; Main entry points to set up Prolog environment

lsInitA          @1
lsInit2A         @2
lsInitLSX        @3
lsAddLSXA        @4
lsAddPredA       @5
lsInitPredsA     @6
lsLoadA          @7
lsMain           @8
lsReset          @9
lsClose          @10
lsLoadFromMemoryA @11

; function and predicate parameters

lsGetParm        @20
lsGetParmType    @21
lsStrParmLen     @22
lsUnifyParm      @23

; Calling Prolog from C

lsExec           @30
lsExecStrA       @31
lsCall           @32
lsCallStrA       @33
lsRedo           @34
lsClearCall      @35

; Asserting and retracting

lsAsserta        @40
lsAssertz        @41
lsRetract        @42
lsAssertaStrA    @43
lsAssertzStrA    @44
lsRetractStrA    @45

; String/Term conversion functions 

lsTermToStrA     @50
lsTermToStrQA    @51
lsStrToTermA     @52

; Making Prolog types

lsMakeAtomA      @60
lsMakeStrA       @61
lsMakeInt        @62
lsMakeFloat      @63
lsMakeAddr       @64

; Getting C values from Prolog terms

lsGetTermType    @70
lsGetTerm        @71
lsStrTermLen     @72

; Structure hacking functions

lsGetFAA         @80
lsMakeFAA        @81
lsUnifyArg       @82
lsGetArg         @83
lsGetArgType     @84
lsStrArgLen      @85
lsUnify          @86

; List hacking functions

lsMakeList       @90
lsPushList       @91
lsPopList        @92
lsGetHead        @93
lsGetTail        @94
			   
; Stream I/O functions

lsSetStream       @100
lsGetStream       @101

lsSetInput        @102
lsSetOutputA      @103
lsSetIOArg        @104

lsOpenUserStreamA @106

; Miscellaneous functions

lsGetVersionA      @110
lsSetCommandArgsA  @111

; Error handling

lsErrRaiseA              @120

lsGetExceptType          @121
lsGetExceptRC            @122
lsGetExceptLineno        @123
lsGetExceptMsgA          @124
lsGetExceptReadBufferA   @125
lsGetExceptCallStackA    @126
lsGetExceptReadFileNameA @127

; Wide versions of string handling functions

lsInitW                  @201
lsInit2W                 @202
lsAddLSXW                @203
lsAddPredW               @204
lsLoadW                  @205
lsExecStrW               @206
lsCallStrW               @207
lsAssertaStrW            @208
lsAssertzStrW            @209
lsRetractStrW            @210
lsTermToStrW             @211
lsTermToStrQW            @212
lsStrToTermW             @213
lsMakeAtomW              @214
lsMakeStrW               @215
lsGetFAW                 @216
lsMakeFAW                @217
lsGetVersionW            @218
lsSetCommandArgsW        @219
lsErrRaiseW              @220
lsGetExceptMsgW          @221
lsGetExceptReadBufferW   @222
lsSetOutputW             @223
lsInitPredsW             @224
lsGetExceptCallStackW    @225
lsGetExceptReadFileNameW @226
lsOpenUserStreamW        @227
lsLoadFromMemoryW        @228


aLinkW                   @229
aLinkA                   @230

; Thread support

lsExecStrThA             @231
lsExecStrThW             @232
lsPutActionA             @233
lsPutActionW             @234
lsGetActionState         @235

; 300's reserved for ARules functions -- see arules.def

RegisterRuntime					 @301
